#!/usr/bin/env python
'''
Created on Jun 7, 2012

@author: pedro.vicente
'''
from optparse import OptionParser
import sys
import os
import glob
from bs4 import BeautifulSoup
import json

#parser = OptionParser()
#parser.add_option("-s", "--sort", type="string", dest="bind", default="0.0.0.0:8880", help="Bind address. Default 0.0.0.0:8090")

#(options, args) = parser.parse_args()
#address, port = options.bind.split(':')

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

def get_number(s, n=0):
    res = [float(tmp) for tmp in s.split() if is_number(tmp)]
    try:
        return res[n]
    except IndexError:
        if res:
            return res[-1]
        else:
            return 0.0

class TestResults:
    def __init__(self, filename, **entries):
        self.__dict__.update(entries)
        self.afilename = filename
        self.output = json.dumps(self.__dict__, sort_keys=True, indent=4)
        
    def __str__(self):
        return "%s:\n %s" % (self.afilename, self.output)

def get_dict_from_row(headers, row):
    values = [tmp.getText() for tmp in row.find_all('td')]
    name, values = values[0], values[1:]
    data = dict(zip(headers,values))
    return name, data


def get_data_from_table(table):
    headers = [ tmp.getText().lower().strip().replace(' ', '_').replace('\n','') for tmp in table.find_all('th')]
    rows = [tmp for tmp in table.find_all('tr')[1:]]
    objects = [ get_dict_from_row(headers[1:], row) for row in rows]
    return dict(objects)

def get_data_from_report_file(filename):
    with open(filename) as f:
        soup = BeautifulSoup(f)
        #getAll statitistics Name is contained in h3 and the next sibling is the table. Filtering tables withoud td
        data = [ (tmp.getText().lower().strip().replace(' ', '_'), tmp.findNextSibling()) for tmp in soup.find_all('h3') if tmp.findNextSibling().find('td')]
        res = dict([ (name, get_data_from_table(table)) for name, table in data])
        return TestResults(filename, **res)
            
            

if len(sys.argv) <2:
    print 'Not enough arguments. Directory path of logs is mandatory as argument. Example */*1worker*/report.html'
    sys.exit(0)

FILENAME_TO_ANALYSE = 'report.html'
#print sys.argv[1]
#print glob.glob(sys.argv[1])

if sys.argv[1].find('*') == -1:
    filenames = [os.path.realpath(tmp) for tmp in sys.argv[1:] if tmp.find(FILENAME_TO_ANALYSE) != -1]
else:
    filenames = [os.path.realpath(tmp) for tmp in glob.glob(sys.argv[1]) if tmp.find(FILENAME_TO_ANALYSE) != -1 ]

#print filenames
data_func = lambda k: k.http_return_code['200']['highest_rate']
sort_func = lambda k: get_number(k.http_return_code['200']['highest_rate'])
res = sorted([get_data_from_report_file(tmp) for tmp in filenames if os.path.exists(tmp)], key = sort_func, reverse=True)
for tmp in res:
    print "%s %s" % (tmp.afilename, data_func(tmp))
